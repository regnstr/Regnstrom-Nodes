<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Regnstrom</name>
    </assembly>
    <members>
        <member name="T:Elements.FamilyInstance">
            <summary>
            Utility methods for FamilyInstance
            </summary>
        </member>
        <member name="M:Elements.FamilyInstance.Flipped(Revit.Elements.FamilyInstance)">
            <summary>
            Returns true if the familyInstance has been flipped
            </summary>
            <param name="familyInstance"></param>
            <returns></returns>
        </member>
        <member name="T:Parameters.ProjectParameter">
            <summary>
            Project parameters.
            </summary>
        </member>
        <member name="M:Parameters.ProjectParameter.BySharedParameter(System.String,System.Boolean,System.String[],System.String)">
            <summary>
            Creates a project parameter based on the definition of a shared parameter.
            </summary>
            <param name="parameterName">The name of the parameter.</param>
            <param name="instance">Set to true to create an instance parameter, false to create a type parameter.</param>
            <param name="categories">The categores to add this parameter to, by their built in parameter name.</param>
            <param name="parameterGroup">The parameter group for this parameter.</param>
            <returns></returns>
        </member>
        <member name="T:Parameters.FamilyParameter">
            <summary>
            Methods for managing parameters
            </summary>
        </member>
        <member name="M:Parameters.FamilyParameter.CreateFamilyParameter(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Creates a new family parameter for the currently open family document
            </summary>
            <param name="name">The name of the parameter</param>
            <param name="group">The group to place the parameter in</param>
            <param name="type">The type of parameter</param>
            <param name="instance">Create as an instance parameter</param>
            <returns>The name of the created parameter</returns>
        </member>
        <member name="T:Parameters.SharedParameter">
            <summary>
            Shared parameters
            </summary>
        </member>
        <member name="M:Parameters.SharedParameter.FileInformation">
            <summary>
            Displays information about the current shared parameter file.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Revit.Document">
            <summary>
            Some extension methods related to the open document.
            </summary>
        </member>
        <member name="M:Revit.Document.AllViews(System.Boolean)">
            <summary>
            Returns all views in the active document except view templates.
            </summary>
            <param name="toggle"></param>
            <returns></returns>
        </member>
        <member name="M:Revit.Document.AllSheets(System.Boolean)">
            <summary>
            Returns all sheets in the active document.
            </summary>
            <param name="toggle"></param>
            <returns></returns>
        </member>
        <member name="T:Revit.ParameterGroup">
            <summary>
            Utility methods for finding builtin parameter groups.
            </summary>
        </member>
        <member name="M:Revit.ParameterGroup.FindParameterGroupByName(System.String)">
            <summary>
            Finds all built in parameter group names matching the regex pattern.
            </summary>
            <param name="pattern">The pattern to match.</param>
            <returns></returns>
        </member>
        <member name="M:Revit.ParameterGroup.ListAll">
            <summary>
            Returns a list of all built it parameter groups.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Revit.BuiltInCategory">
            <summary>
            Utility methods for finding builtin categores.
            </summary>
        </member>
        <member name="M:Revit.BuiltInCategory.FindCategoryByName(System.String)">
            <summary>
            Finds all builtin categories matching the regex pattern.
            </summary>
            <param name="pattern">The pattern to match.</param>
            <returns></returns>
        </member>
        <member name="M:Revit.BuiltInCategory.ListAll">
            <summary>
            Returns a list of all builtin categories.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Site.Location">
            <summary>
            Utility methods for handling true north and coordinates.
            </summary>
        </member>
        <member name="M:Site.Location.North">
            <summary>
            Returns True North as a vector in the project coordinate system. The angle represents a right-handed rotation along the Z-axis to go from True to Project North.
            </summary>
            <returns></returns>
        </member>
        <member name="M:String.Scale.ByInt(System.Int32[],System.Boolean)">
            <summary>
            Converts a list of numbers into a string to be used on drawings.
            </summary>
            <param name="scaleValues"></param>
            <param name="spaces"></param>
            <returns></returns>
        </member>
        <member name="T:String.Regex">
            <summary>
            Contains some of the static methods of the C# Regex class adapted to Dynamo.
            </summary>
        </member>
        <member name="M:String.Regex.IsMatch(System.String,System.String)">
            <summary>
            Checks if the regular expression matches the input.
            </summary>
            <param name="input">The input string.</param>
            <param name="pattern">The regex pattern.</param>
            <returns></returns>
        </member>
        <member name="M:String.Regex.Match(System.String,System.String)">
            <summary>
            Finds the first match of the regular expression.
            </summary>
            <param name="input">The input string.</param>
            <param name="pattern">The regex pattern.</param>
            <returns></returns>
        </member>
        <member name="M:String.Regex.Matches(System.String,System.String)">
            <summary>
            Finds all matches of the regular expression.
            </summary>
            <param name="input">The input string.</param>
            <param name="pattern">The regex pattern.</param>
            <returns></returns>
        </member>
        <member name="M:String.Regex.Replace(System.String,System.String,System.String)">
            <summary>
            Replaces all matches in "input" with "replacement".
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <param name="replacement"></param>
            <returns></returns>
        </member>
        <member name="M:String.Regex.Split(System.String,System.String)">
            <summary>
            Returns substrings of the input, split where the regex pattern matches.
            </summary>
            <param name="input"></param>
            <param name="pattern"></param>
            <returns></returns>
        </member>
        <member name="T:Views.View">
            <summary>
            Extensions for handling views.
            </summary>
        </member>
        <member name="M:Views.View.Rotate(Revit.Elements.Views.View,System.Double)">
            <summary>
            Rotates a crop box around it's centre.
            </summary>
            <param name="view">The view to rotate.</param>
            <param name="degrees">Rotation angle in degrees. Everything visible in the view will be rotated clockwise by this amount.</param>
            <returns>The rotated view.</returns>
        </member>
        <member name="M:Views.Sheet.AllScales(Revit.Elements.Views.Sheet)">
            <summary>
            Returns all scales present on a sheet in a sorted list of integers.
            </summary>
            <param name="sheet">The input sheet.</param>
            <returns></returns>
        </member>
    </members>
</doc>
